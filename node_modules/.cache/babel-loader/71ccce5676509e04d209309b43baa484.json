{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Java Course\\\\React\\\\final\\\\src\\\\Components\\\\MainArea\\\\AdminPages\\\\UpdateCompany\\\\UpdateCompany.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./UpdateCompany.css\";\nimport { useEffect, useState } from 'react';\nimport notify from \"../../../../Services/Notify\";\nimport store from \"../../../../Redux/Store\";\nimport { companyUpdateAction } from \"../../../../Redux/CompanyState\";\nimport { useHistory } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport jwtAxios from \"../../../../Authorization/jwtAxios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UpdateCompany(props) {\n  _s();\n\n  var _errors$email, _errors$password;\n\n  const companyId = parseInt(props.id);\n  const updateCompanyArray = store.getState().companyState.companies.filter(function (item) {\n    return item.id === companyId;\n  });\n  const updateCompany = updateCompanyArray[0];\n  const [updatedEmail, setUpdatedEmail] = useState(updateCompany.email);\n  const [updatedPassword, setUpdatedPassword] = useState(updateCompany.password);\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n  const history = useHistory();\n\n  async function send(company) {\n    company.id = companyId;\n    company.name = updateCompany.name;\n    company.email = updatedEmail;\n    company.password = updatedPassword;\n    company.coupons = updateCompany.coupons;\n\n    try {\n      console.log(company);\n      await jwtAxios.put(\"http://localhost:8080/administrator/company/update\", company);\n      store.dispatch(companyUpdateAction(company));\n      notify.success(\"Company update successfully!\");\n      history.push(\"/administrator/allCompanies\");\n    } catch {\n      notify.error(\"There was a problem with updating this company\");\n    }\n  }\n\n  useEffect(() => {}, []);\n  const ref = {\n    register\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"UpdateCompany Form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Update Company:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(send),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"id\",\n        value: parseInt(props.id),\n        ref: register({}),\n        disabled: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        value: updateCompany.name,\n        ref: register({}),\n        disabled: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        defaultValue: updateCompany.email,\n        onChange: e => setUpdatedEmail(e.target.value),\n        ref: register({\n          required: {\n            value: true,\n            message: \"Missing company email!\"\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 23\n        }, this), (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        defaultValue: updateCompany.password,\n        onChange: e => setUpdatedPassword(e.target.value),\n        ref: register({\n          required: {\n            value: true,\n            message: \"Missing company password!\"\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 23\n        }, this), (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UpdateCompany, \"BKqbXrgVSp9vP0mXudY12L0r27I=\", false, function () {\n  return [useForm, useHistory];\n});\n\n_c = UpdateCompany;\nexport default UpdateCompany;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateCompany\");","map":{"version":3,"sources":["C:/Users/user/Desktop/Java Course/React/final/src/Components/MainArea/AdminPages/UpdateCompany/UpdateCompany.tsx"],"names":["useEffect","useState","notify","store","companyUpdateAction","useHistory","useForm","jwtAxios","UpdateCompany","props","companyId","parseInt","id","updateCompanyArray","getState","companyState","companies","filter","item","updateCompany","updatedEmail","setUpdatedEmail","email","updatedPassword","setUpdatedPassword","password","register","handleSubmit","errors","history","send","company","name","coupons","console","log","put","dispatch","success","push","error","ref","e","target","value","required","message"],"mappings":"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","sourcesContent":["import Company from \"../../../../Models/Company\";\r\nimport \"./UpdateCompany.css\";\r\nimport {useEffect, useState} from 'react';\r\nimport notify from \"../../../../Services/Notify\";\r\nimport store from \"../../../../Redux/Store\";\r\nimport { companyUpdateAction } from \"../../../../Redux/CompanyState\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport jwtAxios from \"../../../../Authorization/jwtAxios\";\r\n\r\ninterface UpdateCompanyProps {\r\n   id:string;\r\n}\r\n\r\nfunction UpdateCompany(props: UpdateCompanyProps): JSX.Element {\r\n    const companyId = parseInt(props.id);\r\n    const updateCompanyArray = store.getState().companyState.companies.filter(function (item){return item.id === companyId});\r\n    const updateCompany = updateCompanyArray[0];\r\n\r\n    const [updatedEmail, setUpdatedEmail] = useState<string>(updateCompany.email);\r\n    const [updatedPassword, setUpdatedPassword] = useState<string>(updateCompany.password);\r\n      \r\n    const {register, handleSubmit, errors} = useForm<Company>();\r\n    const history = useHistory();\r\n    async function send(company:Company){\r\n        company.id = companyId;\r\n        company.name=updateCompany.name;\r\n        company.email=updatedEmail;\r\n        company.password=updatedPassword;\r\n        company.coupons=updateCompany.coupons;\r\n        try{  \r\n            console.log(company);\r\n            await jwtAxios.put<Company>(\"http://localhost:8080/administrator/company/update\",company);\r\n            store.dispatch(companyUpdateAction(company));\r\n            notify.success(\"Company update successfully!\");\r\n            history.push(\"/administrator/allCompanies\");\r\n        } catch {\r\n            notify.error(\"There was a problem with updating this company\");\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{ \r\n    }, [])\r\n    \r\n    const ref={register}\r\n    return (\r\n        <div className=\"UpdateCompany Form\">\r\n\t\t\t<h2>Update Company:</h2>\r\n            <form onSubmit={handleSubmit(send)}>\r\n                <input type=\"text\" name=\"id\" value={parseInt(props.id)} ref={register({\r\n                })} disabled/>\r\n                <br/><br/>\r\n                <input type=\"text\" name=\"name\" value={updateCompany.name} ref={register({\r\n                })} disabled/>\r\n                <br/><br/>\r\n                <input type=\"email\" name=\"email\" defaultValue={updateCompany.email} onChange={e =>setUpdatedEmail(e.target.value)} ref={register({\r\n                required: {value:true , message:\"Missing company email!\"}\r\n                })}/>\r\n                <span><br/>{errors.email?.message}</span>\r\n                <br/><br/>\r\n                <input type=\"password\" name=\"password\" defaultValue={updateCompany.password} onChange={e =>setUpdatedPassword(e.target.value)} ref={register({\r\n                required: {value:true , message:\"Missing company password!\"}\r\n                })}/>\r\n                <span><br/>{errors.password?.message}</span>\r\n                <br/><br/>\r\n                <button>Update</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\n export default UpdateCompany;"]},"metadata":{},"sourceType":"module"}