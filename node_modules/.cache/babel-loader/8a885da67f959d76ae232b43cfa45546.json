{"ast":null,"code":"import axios from \"axios\";\nimport { loginAction } from \"../Redux/AuthState\";\nimport store from \"../Redux/Store\";\nconst jwtAxios = axios.create();\njwtAxios.interceptors.request.use(request => {\n  request.headers = {\n    \"Authorization\": store.getState().authState.user.token\n  };\n  return request;\n});\njwtAxios.interceptors.response.use(response => {\n  if (response.headers.authorization === undefined) {\n    //store.dispatch(tokenUpdateAction(response.config.headers.Authorization));\n    const user = store.getState().authState.user;\n    user.token = response.config.headers.Authorization;\n    store.dispatch(loginAction(user));\n  } else {\n    //store.dispatch(tokenUpdateAction(response.headers.authorization));\n    // store.dispatch(loginAction(response.headers.authorization));\n    const user = store.getState().authState.user;\n    user.token = response.headers.authorization;\n    store.dispatch(loginAction(user));\n  }\n\n  return response;\n});\nexport default jwtAxios;","map":{"version":3,"sources":["C:/Users/user/Desktop/Java Course/React/final/src/Authorization/jwtAxios.ts"],"names":["axios","loginAction","store","jwtAxios","create","interceptors","request","use","headers","getState","authState","user","token","response","authorization","undefined","config","Authorization","dispatch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,MAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAN,EAAjB;AAEAD,QAAQ,CAACE,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkCD,OAAO,IAAE;AACvCA,EAAAA,OAAO,CAACE,OAAR,GAAgB;AAAC,qBAAgBN,KAAK,CAACO,QAAN,GAAiBC,SAAjB,CAA2BC,IAA3B,CAAgCC;AAAjD,GAAhB;AACA,SAAON,OAAP;AACH,CAHD;AAKAH,QAAQ,CAACE,YAAT,CAAsBQ,QAAtB,CAA+BN,GAA/B,CAAmCM,QAAQ,IAAI;AAC3C,MAAIA,QAAQ,CAACL,OAAT,CAAiBM,aAAjB,KAAmCC,SAAvC,EAAkD;AAC9C;AACA,UAAMJ,IAAI,GAAGT,KAAK,CAACO,QAAN,GAAiBC,SAAjB,CAA2BC,IAAxC;AACAA,IAAAA,IAAI,CAACC,KAAL,GAAWC,QAAQ,CAACG,MAAT,CAAgBR,OAAhB,CAAwBS,aAAnC;AACAf,IAAAA,KAAK,CAACgB,QAAN,CAAejB,WAAW,CAACU,IAAD,CAA1B;AACH,GALD,MAKO;AACH;AACA;AACA,UAAMA,IAAI,GAAGT,KAAK,CAACO,QAAN,GAAiBC,SAAjB,CAA2BC,IAAxC;AACAA,IAAAA,IAAI,CAACC,KAAL,GAAWC,QAAQ,CAACL,OAAT,CAAiBM,aAA5B;AACAZ,IAAAA,KAAK,CAACgB,QAAN,CAAejB,WAAW,CAACU,IAAD,CAA1B;AACH;;AACA,SAAOE,QAAP;AACJ,CAdD;AAgBA,eAAeV,QAAf","sourcesContent":["import axios from \"axios\";\r\nimport { loginAction } from \"../Redux/AuthState\";\r\nimport store from \"../Redux/Store\";\r\n\r\nconst jwtAxios = axios.create();\r\n\r\njwtAxios.interceptors.request.use(request=>{\r\n    request.headers={\"Authorization\":store.getState().authState.user.token}\r\n    return request;\r\n})\r\n\r\njwtAxios.interceptors.response.use(response => {\r\n    if (response.headers.authorization === undefined) {\r\n        //store.dispatch(tokenUpdateAction(response.config.headers.Authorization));\r\n        const user=  store.getState().authState.user;\r\n        user.token=response.config.headers.Authorization;\r\n        store.dispatch(loginAction(user));\r\n    } else {\r\n        //store.dispatch(tokenUpdateAction(response.headers.authorization));\r\n        // store.dispatch(loginAction(response.headers.authorization));\r\n        const user=  store.getState().authState.user;\r\n        user.token=response.headers.authorization;\r\n        store.dispatch(loginAction(user));\r\n    }\r\n     return response;\r\n})\r\n\r\nexport default jwtAxios;"]},"metadata":{},"sourceType":"module"}