{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Java Course\\\\React\\\\final\\\\src\\\\Components\\\\MainArea\\\\AdminPages\\\\UpdateCustomer\\\\UpdateCustomer.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./UpdateCustomer.css\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport jwtAxios from \"../../../../Authorization/jwtAxios\";\nimport { customerUpdateAction } from \"../../../../Redux/CustomerState\";\nimport store from \"../../../../Redux/Store\";\nimport notify from \"../../../../Services/Notify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UpdateCustomer(props) {\n  _s();\n\n  var _errors$email, _errors$password;\n\n  const customerId = parseInt(props.id);\n  const reduxCustomer = store.getState().customerState.customers.filter(function (item) {\n    return item.id == customerId;\n  });\n  const updateCustomer = reduxCustomer[0];\n  const [updatedEmail, setUpdatedEmail] = useState(updateCustomer.email);\n  const [updatedPassword, setUpdatedPassword] = useState(updateCustomer.password);\n  const [updatedFirstName, setUpdatedFirstName] = useState(updateCustomer.firstName);\n  const [updatedLastName, setUpdatedLastName] = useState(updateCustomer.lastName);\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n  const history = useHistory();\n\n  async function send(customer) {\n    customer.id = customerId;\n    customer.firstName = updatedFirstName;\n    customer.lastName = updatedLastName;\n    customer.email = updatedEmail;\n    customer.password = updatedPassword;\n    customer.coupons = updateCustomer.coupons;\n\n    try {\n      console.log(customer);\n      await jwtAxios.put(\"http://localhost:8080/administrator/customer/update\", customer);\n      store.dispatch(customerUpdateAction(customer));\n      notify.success(\"Customer update successfully!\");\n      history.push(\"/administrator/allCustomers\");\n    } catch {\n      notify.error(\"There was a problem with updating this customer\");\n    }\n  }\n\n  useEffect(() => {}, []);\n  const ref = {\n    register\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"UpdateCustomer Form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Update Customer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(send),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"id\",\n        value: parseInt(props.id),\n        ref: register({}),\n        disabled: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"firstName\",\n        defaultValue: updateCustomer.firstName,\n        onChange: e => setUpdatedFirstName(e.target.value),\n        ref: register({\n          required: {\n            value: true,\n            message: \"Missing customer first name!\"\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"lastName\",\n        defaultValue: updateCustomer.lastName,\n        onChange: e => setUpdatedLastName(e.target.value),\n        ref: register({\n          required: {\n            value: true,\n            message: \"Missing customer last name!\"\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        defaultValue: updateCustomer.email,\n        onChange: e => setUpdatedEmail(e.target.value),\n        ref: register({\n          required: {\n            value: true,\n            message: \"Missing customer email!\"\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 24\n        }, this), (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        defaultValue: updateCustomer.password,\n        onChange: e => setUpdatedPassword(e.target.value),\n        ref: register({\n          required: {\n            value: true,\n            message: \"Missing customer password!\"\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 24\n        }, this), (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n}\n\n_s(UpdateCustomer, \"JIbOgFhn/Bu7j3zS6wVSH66LQhs=\", false, function () {\n  return [useForm, useHistory];\n});\n\n_c = UpdateCustomer;\nexport default UpdateCustomer;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateCustomer\");","map":{"version":3,"sources":["C:/Users/user/Desktop/Java Course/React/final/src/Components/MainArea/AdminPages/UpdateCustomer/UpdateCustomer.tsx"],"names":["useEffect","useState","useForm","useHistory","jwtAxios","customerUpdateAction","store","notify","UpdateCustomer","props","customerId","parseInt","id","reduxCustomer","getState","customerState","customers","filter","item","updateCustomer","updatedEmail","setUpdatedEmail","email","updatedPassword","setUpdatedPassword","password","updatedFirstName","setUpdatedFirstName","firstName","updatedLastName","setUpdatedLastName","lastName","register","handleSubmit","errors","history","send","customer","coupons","console","log","put","dispatch","success","push","error","ref","e","target","value","required","message"],"mappings":"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","sourcesContent":["import \"./UpdateCustomer.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport jwtAxios from \"../../../../Authorization/jwtAxios\";\r\nimport Customer from \"../../../../Models/Customer\";\r\nimport { customerUpdateAction } from \"../../../../Redux/CustomerState\";\r\nimport store from \"../../../../Redux/Store\";\r\nimport notify from \"../../../../Services/Notify\";\r\n\r\ninterface UpdateCustomerProps {\r\n    id:string;\r\n}\r\n  \r\nfunction UpdateCustomer(props: UpdateCustomerProps): JSX.Element {\r\n    const customerId = parseInt(props.id);\r\n    const reduxCustomer = store.getState().customerState.customers.filter(function (item){return item.id==customerId});\r\n    const updateCustomer = reduxCustomer[0];\r\n  \r\n    const [updatedEmail, setUpdatedEmail] = useState<string>(updateCustomer.email);\r\n    const [updatedPassword, setUpdatedPassword] = useState<string>(updateCustomer.password);\r\n    const [updatedFirstName, setUpdatedFirstName] = useState<string>(updateCustomer.firstName);\r\n    const [updatedLastName, setUpdatedLastName] = useState<string>(updateCustomer.lastName);   \r\n  \r\n    const {register, handleSubmit, errors} = useForm<Customer>();\r\n    const history = useHistory();\r\n    async function send(customer:Customer){\r\n         customer.id = customerId;\r\n         customer.firstName=updatedFirstName;\r\n         customer.lastName=updatedLastName;\r\n         customer.email=updatedEmail;\r\n         customer.password=updatedPassword;\r\n         customer.coupons=updateCustomer.coupons;\r\n         try{  \r\n             console.log(customer);\r\n             await jwtAxios.put<Customer>(\"http://localhost:8080/administrator/customer/update\",customer);\r\n             store.dispatch(customerUpdateAction(customer));\r\n             notify.success(\"Customer update successfully!\");\r\n             history.push(\"/administrator/allCustomers\");\r\n         } catch {\r\n             notify.error(\"There was a problem with updating this customer\");\r\n         }\r\n     }\r\n  \r\n     useEffect(()=>{ \r\n     }, [])\r\n     \r\n     const ref={register}\r\n     return (\r\n         <div className=\"UpdateCustomer Form\">\r\n       <h2>Update Customer</h2>\r\n             <form onSubmit={handleSubmit(send)}>\r\n                 <input type=\"text\" name=\"id\" value={parseInt(props.id)} ref={register({\r\n                 })} disabled/>\r\n                 <br/><br/>\r\n                 <input type=\"text\" name=\"firstName\" defaultValue={updateCustomer.firstName} onChange={e => setUpdatedFirstName(e.target.value)} ref={register({\r\n                  required: {value:true , message:\"Missing customer first name!\"}\r\n                 })} /><br/><br/>\r\n                 <input type=\"text\" name=\"lastName\" defaultValue={updateCustomer.lastName} onChange={e => setUpdatedLastName(e.target.value)} ref={register({\r\n                  required: {value:true , message:\"Missing customer last name!\"}\r\n                 })} />\r\n                 <br/><br/>\r\n                 <input type=\"email\" name=\"email\" defaultValue={updateCustomer.email} onChange={e =>setUpdatedEmail(e.target.value)} ref={register({\r\n                 required: {value:true , message:\"Missing customer email!\"}\r\n                 })}/>\r\n                 <span><br/>{errors.email?.message}</span>\r\n                 <br/><br/>\r\n                 <input type=\"password\" name=\"password\" defaultValue={updateCustomer.password} onChange={e =>setUpdatedPassword(e.target.value)} ref={register({\r\n                 required: {value:true , message:\"Missing customer password!\"}\r\n                 })}/>\r\n                 <span><br/>{errors.password?.message}</span>\r\n                 <br/><br/>\r\n                 <button>Update</button>\r\n             </form>\r\n         </div>\r\n     );\r\n  }\r\n  \r\n  export default UpdateCustomer;"]},"metadata":{},"sourceType":"module"}