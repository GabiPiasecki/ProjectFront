{"ast":null,"code":"export class CompanyState {\n  constructor() {\n    this.companies = [];\n  }\n\n}\nexport let CompanyActionType;\n\n(function (CompanyActionType) {\n  CompanyActionType[\"CompanyDownload\"] = \"CompanyDownload\";\n  CompanyActionType[\"CompanyAdd\"] = \"CompanyAdd\";\n  CompanyActionType[\"CompanyUpdate\"] = \"CompanyUpdate\";\n  CompanyActionType[\"CompanyDelete\"] = \"CompanyDelete\";\n})(CompanyActionType || (CompanyActionType = {}));\n\nexport function companyDownloadAction(companies) {\n  return {\n    type: CompanyActionType.CompanyDownload,\n    payload: companies\n  };\n}\nexport function companyAddAction(company) {\n  return {\n    type: CompanyActionType.CompanyAdd,\n    payload: company\n  };\n}\nexport function companyUpdateAction(company) {\n  return {\n    type: CompanyActionType.CompanyUpdate,\n    payload: company\n  };\n}\nexport function companyDeleteAction(company) {\n  return {\n    type: CompanyActionType.CompanyDelete,\n    payload: company\n  };\n}\nexport function companyReducer(currentState = new CompanyState(), action) {\n  const newState = { ...currentState\n  };\n\n  switch (action.type) {\n    case CompanyActionType.CompanyDownload:\n      newState.companies = action.payload;\n      break;\n\n    case CompanyActionType.CompanyAdd:\n      newState.companies.push(action.payload);\n      break;\n\n    case CompanyActionType.CompanyUpdate:\n      const index = newState.companies.findIndex(item => item.id === action.payload.id);\n      newState.companies.splice(index, 1, action.payload);\n      break;\n\n    case CompanyActionType.CompanyDelete:\n      // newState.companies.splice(action.payload);\n      const deleteIndex = newState.companies.findIndex(item => item.id === action.payload.id);\n      newState.companies.splice(deleteIndex, 1);\n      break;\n  }\n\n  return newState;\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/Java Course/React/final/src/Redux/CompanyState.ts"],"names":["CompanyState","companies","CompanyActionType","companyDownloadAction","type","CompanyDownload","payload","companyAddAction","company","CompanyAdd","companyUpdateAction","CompanyUpdate","companyDeleteAction","CompanyDelete","companyReducer","currentState","action","newState","push","index","findIndex","item","id","splice","deleteIndex"],"mappings":"AAEA,OAAO,MAAMA,YAAN,CAAkB;AAAA;AAAA,SACdC,SADc,GACU,EADV;AAAA;;AAAA;AAIzB,WAAYC,iBAAZ;;WAAYA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;GAAAA,iB,KAAAA,iB;;AAYZ,OAAO,SAASC,qBAAT,CAA+BF,SAA/B,EAAkE;AACrE,SAAO;AAACG,IAAAA,IAAI,EAAEF,iBAAiB,CAACG,eAAzB;AAA0CC,IAAAA,OAAO,EAACL;AAAlD,GAAP;AACH;AAED,OAAO,SAASM,gBAAT,CAA0BC,OAA1B,EAAyD;AAC5D,SAAO;AAACJ,IAAAA,IAAI,EAAEF,iBAAiB,CAACO,UAAzB;AAAqCH,IAAAA,OAAO,EAACE;AAA7C,GAAP;AACH;AAED,OAAO,SAASE,mBAAT,CAA6BF,OAA7B,EAA4D;AAC/D,SAAO;AAACJ,IAAAA,IAAI,EAAEF,iBAAiB,CAACS,aAAzB;AAAwCL,IAAAA,OAAO,EAACE;AAAhD,GAAP;AACH;AAED,OAAO,SAASI,mBAAT,CAA6BJ,OAA7B,EAA2D;AAC9D,SAAO;AAACJ,IAAAA,IAAI,EAAEF,iBAAiB,CAACW,aAAzB;AAAwCP,IAAAA,OAAO,EAACE;AAAhD,GAAP;AACH;AAED,OAAO,SAASM,cAAT,CAAwBC,YAA0B,GAAG,IAAIf,YAAJ,EAArD,EAAuEgB,MAAvE,EAAyG;AAC5G,QAAMC,QAAQ,GAAG,EAAC,GAAGF;AAAJ,GAAjB;;AAEA,UAAOC,MAAM,CAACZ,IAAd;AACI,SAAKF,iBAAiB,CAACG,eAAvB;AACIY,MAAAA,QAAQ,CAAChB,SAAT,GAAqBe,MAAM,CAACV,OAA5B;AACA;;AACJ,SAAKJ,iBAAiB,CAACO,UAAvB;AACIQ,MAAAA,QAAQ,CAAChB,SAAT,CAAmBiB,IAAnB,CAAwBF,MAAM,CAACV,OAA/B;AACA;;AACJ,SAAKJ,iBAAiB,CAACS,aAAvB;AACI,YAAMQ,KAAK,GAAGF,QAAQ,CAAChB,SAAT,CAAmBmB,SAAnB,CAA6BC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACV,OAAP,CAAegB,EAAhE,CAAd;AACAL,MAAAA,QAAQ,CAAChB,SAAT,CAAmBsB,MAAnB,CAA0BJ,KAA1B,EAAiC,CAAjC,EAAoCH,MAAM,CAACV,OAA3C;AACA;;AACJ,SAAKJ,iBAAiB,CAACW,aAAvB;AACI;AACA,YAAMW,WAAW,GAAGP,QAAQ,CAAChB,SAAT,CAAmBmB,SAAnB,CAA6BC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACV,OAAP,CAAegB,EAAhE,CAApB;AACAL,MAAAA,QAAQ,CAAChB,SAAT,CAAmBsB,MAAnB,CAA0BC,WAA1B,EAAsC,CAAtC;AACA;AAfR;;AAiBA,SAAOP,QAAP;AACH","sourcesContent":["import Company from \"../Models/Company\";\r\n\r\nexport class CompanyState{\r\n    public companies : Company[] = [];\r\n}\r\n\r\nexport enum CompanyActionType{\r\n    CompanyDownload = \"CompanyDownload\",\r\n    CompanyAdd = \"CompanyAdd\",\r\n    CompanyUpdate = \"CompanyUpdate\",\r\n    CompanyDelete = \"CompanyDelete\"\r\n}\r\n\r\nexport interface CompanyAction{\r\n    type : CompanyActionType;\r\n    payload? : any;\r\n}\r\n\r\nexport function companyDownloadAction(companies: Company[]):CompanyAction{\r\n    return {type: CompanyActionType.CompanyDownload, payload:companies}\r\n}\r\n\r\nexport function companyAddAction(company: Company):CompanyAction{\r\n    return {type: CompanyActionType.CompanyAdd, payload:company}\r\n}\r\n\r\nexport function companyUpdateAction(company: Company):CompanyAction{\r\n    return {type: CompanyActionType.CompanyUpdate, payload:company}\r\n}\r\n\r\nexport function companyDeleteAction(company:Company):CompanyAction{\r\n    return {type: CompanyActionType.CompanyDelete, payload:company}\r\n}\r\n\r\nexport function companyReducer(currentState: CompanyState = new CompanyState, action:CompanyAction):CompanyState{\r\n    const newState = {...currentState};\r\n\r\n    switch(action.type){\r\n        case CompanyActionType.CompanyDownload:\r\n            newState.companies = action.payload;\r\n            break;\r\n        case CompanyActionType.CompanyAdd:\r\n            newState.companies.push(action.payload);\r\n            break;\r\n        case CompanyActionType.CompanyUpdate:\r\n            const index = newState.companies.findIndex(item => item.id === action.payload.id);\r\n            newState.companies.splice(index, 1, action.payload);\r\n            break;\r\n        case CompanyActionType.CompanyDelete:\r\n            // newState.companies.splice(action.payload);\r\n            const deleteIndex = newState.companies.findIndex(item => item.id === action.payload.id);\r\n            newState.companies.splice(deleteIndex,1);\r\n            break;\r\n    }\r\n    return newState;\r\n}"]},"metadata":{},"sourceType":"module"}