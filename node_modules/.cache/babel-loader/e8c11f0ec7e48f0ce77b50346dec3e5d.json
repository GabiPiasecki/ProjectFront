{"ast":null,"code":"export class CustomerState {\n  constructor() {\n    this.customers = [];\n  }\n\n}\nexport let CustomerActionType;\n\n(function (CustomerActionType) {\n  CustomerActionType[\"CustomerDownload\"] = \"CustomerDownload\";\n  CustomerActionType[\"CustomerAdd\"] = \"CustomerAdd\";\n  CustomerActionType[\"CustomerUpdate\"] = \"CustomerUpdate\";\n  CustomerActionType[\"CustomerDelete\"] = \"CustomerDelete\";\n  CustomerActionType[\"Register\"] = \"Register\";\n})(CustomerActionType || (CustomerActionType = {}));\n\nexport function customerDownloadAction(customers) {\n  return {\n    type: CustomerActionType.CustomerDownload,\n    payload: customers\n  };\n}\nexport function customerAddAction(customer) {\n  return {\n    type: CustomerActionType.CustomerAdd,\n    payload: customer\n  };\n}\nexport function customerUpdateAction(customer) {\n  return {\n    type: CustomerActionType.CustomerUpdate,\n    payload: customer\n  };\n}\nexport function customerDeleteAction(customer) {\n  return {\n    type: CustomerActionType.CustomerDelete,\n    payload: customer\n  };\n}\nexport function customerReducer(currentState = new CustomerState(), action) {\n  const newState = { ...currentState\n  };\n\n  switch (action.type) {\n    case CustomerActionType.CustomerDownload:\n      newState.customers = action.payload;\n      break;\n\n    case CustomerActionType.CustomerAdd:\n      newState.customers.push(action.payload);\n      break;\n\n    case CustomerActionType.CustomerUpdate:\n      const index = newState.customers.findIndex(item => item.id === action.payload.id);\n      newState.customers.splice(index, 1, action.payload);\n      break;\n\n    case CustomerActionType.CustomerDelete:\n      const deleteIndex = newState.customers.findIndex(item => item.id === action.payload.id);\n      newState.customers.splice(deleteIndex, 1);\n      break;\n  }\n\n  return newState;\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/Java Course/React/final/src/Redux/CustomerState.ts"],"names":["CustomerState","customers","CustomerActionType","customerDownloadAction","type","CustomerDownload","payload","customerAddAction","customer","CustomerAdd","customerUpdateAction","CustomerUpdate","customerDeleteAction","CustomerDelete","customerReducer","currentState","action","newState","push","index","findIndex","item","id","splice","deleteIndex"],"mappings":"AAEA,OAAO,MAAMA,aAAN,CAAmB;AAAA;AAAA,SACfC,SADe,GACU,EADV;AAAA;;AAAA;AAI1B,WAAYC,kBAAZ;;WAAYA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;GAAAA,kB,KAAAA,kB;;AAaZ,OAAO,SAASC,sBAAT,CAAgCF,SAAhC,EAAqE;AACxE,SAAO;AAACG,IAAAA,IAAI,EAAEF,kBAAkB,CAACG,gBAA1B;AAA4CC,IAAAA,OAAO,EAACL;AAApD,GAAP;AACH;AACD,OAAO,SAASM,iBAAT,CAA2BC,QAA3B,EAA6D;AAChE,SAAO;AAACJ,IAAAA,IAAI,EAAEF,kBAAkB,CAACO,WAA1B;AAAuCH,IAAAA,OAAO,EAACE;AAA/C,GAAP;AACH;AAED,OAAO,SAASE,oBAAT,CAA8BF,QAA9B,EAAgE;AACnE,SAAO;AAACJ,IAAAA,IAAI,EAAEF,kBAAkB,CAACS,cAA1B;AAA0CL,IAAAA,OAAO,EAACE;AAAlD,GAAP;AACH;AAED,OAAO,SAASI,oBAAT,CAA8BJ,QAA9B,EAAgE;AACnE,SAAO;AAACJ,IAAAA,IAAI,EAAEF,kBAAkB,CAACW,cAA1B;AAA0CP,IAAAA,OAAO,EAACE;AAAlD,GAAP;AACH;AAGD,OAAO,SAASM,eAAT,CAAyBC,YAA2B,GAAG,IAAIf,aAAJ,EAAvD,EAA0EgB,MAA1E,EAA8G;AACjH,QAAMC,QAAQ,GAAG,EAAC,GAAGF;AAAJ,GAAjB;;AAEA,UAAOC,MAAM,CAACZ,IAAd;AACI,SAAKF,kBAAkB,CAACG,gBAAxB;AACIY,MAAAA,QAAQ,CAAChB,SAAT,GAAoBe,MAAM,CAACV,OAA3B;AACA;;AACJ,SAAKJ,kBAAkB,CAACO,WAAxB;AACIQ,MAAAA,QAAQ,CAAChB,SAAT,CAAmBiB,IAAnB,CAAwBF,MAAM,CAACV,OAA/B;AACA;;AACJ,SAAKJ,kBAAkB,CAACS,cAAxB;AACI,YAAMQ,KAAK,GAAGF,QAAQ,CAAChB,SAAT,CAAmBmB,SAAnB,CAA6BC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACV,OAAP,CAAegB,EAAhE,CAAd;AACAL,MAAAA,QAAQ,CAAChB,SAAT,CAAmBsB,MAAnB,CAA0BJ,KAA1B,EAAiC,CAAjC,EAAoCH,MAAM,CAACV,OAA3C;AACA;;AACJ,SAAKJ,kBAAkB,CAACW,cAAxB;AACI,YAAMW,WAAW,GAAGP,QAAQ,CAAChB,SAAT,CAAmBmB,SAAnB,CAA6BC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACV,OAAP,CAAegB,EAAhE,CAApB;AACAL,MAAAA,QAAQ,CAAChB,SAAT,CAAmBsB,MAAnB,CAA0BC,WAA1B,EAAsC,CAAtC;AACA;AAdR;;AAgBA,SAAOP,QAAP;AACH","sourcesContent":["import Customer from \"../Models/Customer\";\r\n\r\nexport class CustomerState{\r\n    public customers : Customer[] = [];\r\n}\r\n\r\nexport enum CustomerActionType{\r\n    CustomerDownload =\"CustomerDownload\",\r\n    CustomerAdd = \"CustomerAdd\",\r\n    CustomerUpdate = \"CustomerUpdate\",\r\n    CustomerDelete = \"CustomerDelete\",\r\n    Register = \"Register\"\r\n}\r\n\r\nexport interface CustomerAction{\r\n    type : CustomerActionType;\r\n    payload? : any;\r\n}\r\n\r\nexport function customerDownloadAction(customers: Customer[]):CustomerAction{\r\n    return {type: CustomerActionType.CustomerDownload, payload:customers}\r\n}\r\nexport function customerAddAction(customer: Customer):CustomerAction{\r\n    return {type: CustomerActionType.CustomerAdd, payload:customer}\r\n}\r\n\r\nexport function customerUpdateAction(customer: Customer):CustomerAction{\r\n    return {type: CustomerActionType.CustomerUpdate, payload:customer}\r\n}\r\n\r\nexport function customerDeleteAction(customer: Customer):CustomerAction{\r\n    return {type: CustomerActionType.CustomerDelete, payload:customer}\r\n}\r\n\r\n\r\nexport function customerReducer(currentState: CustomerState = new CustomerState, action:CustomerAction):CustomerState{\r\n    const newState = {...currentState};\r\n\r\n    switch(action.type){\r\n        case CustomerActionType.CustomerDownload:\r\n            newState.customers =action.payload;\r\n            break;\r\n        case CustomerActionType.CustomerAdd:\r\n            newState.customers.push(action.payload);\r\n            break;\r\n        case CustomerActionType.CustomerUpdate:\r\n            const index = newState.customers.findIndex(item => item.id === action.payload.id);\r\n            newState.customers.splice(index, 1, action.payload);\r\n            break;\r\n        case CustomerActionType.CustomerDelete:\r\n            const deleteIndex = newState.customers.findIndex(item => item.id === action.payload.id);\r\n            newState.customers.splice(deleteIndex,1);\r\n            break;\r\n    }\r\n    return newState;\r\n}"]},"metadata":{},"sourceType":"module"}